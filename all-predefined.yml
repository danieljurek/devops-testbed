jobs:
  - job: predefineds
    pool:
      vmImage: windows-2019
    variables:
      TEST_RUNTIME_SETTINGS: ONE
      SetAtVariable: YEP
    steps:

      - pwsh: Write-Host "Hello world" 
        displayName: Set at variable -- \$(SetAtVariable)

      - pwsh: Write-Host "Hello world" 
        displayName: Set at queue-time -- \$(SetAtQueueTime)

      - pwsh: Write-Host "Hello world" 
        displayName: Not set -- \$(NotSet)


      # - pwsh: Write-Host "##vso[task.setvariable variable=PublishToVcpkg]true"
      #   displayName: Set PublishToVcpkg to true

      # - pwsh: Write-Host "##vso[task.setvariable variable=HasChanges]true"
      #   displayName: Set HasChanges to true

      # - template: /test-template.yml
      #   parameters:
      #     SkipCheckingForChanges: variables['PublishToVcpkg']
      #     # SkipCheckingForChanges: false

      # - pwsh: |
      #     $urlBase = "https://example.com/"
      #     Write-Host "##vso[task.setvariable variable=UrlBase;isOutput=true]$urlBase"
      #   name: GenerateUrlBase
      #   displayName: Set UrlBase

      # - pwsh: Write-Host "$(GenerateUrlBase.UrlBase)"

      # - pwsh: |
      #     Write-Host "Build.Repository.Uri: $(Build.Repository.Uri)"
      #   displayName: Build.Repository.Uri
      # - pwsh: |
      #     Write-Host 'TEST_RUNTIME_SETTINGS: $(TEST_RUNTIME_SETTINGS)'
      #     Write-Host "Assign: TWO"
      #     Write-Host "##vso[task.setvariable variable=TEST_RUNTIME_SETTINGS;]TWO"
      #   displayName: Set TEST_RUNTIME_SETTINGS


      # - pwsh: |
      #     Write-Host "TEST_RUNTIME_SETTINGS: $(TEST_RUNTIME_SETTINGS)"
      #   displayName: Show TEST_RUNTIME_SETTINGS after setting


      # - pwsh: |
      #     Write-Host "GIT_TERMINAL_PROMPT: $($env:GIT_TERMINAL_PROMPT)"
      #   displayName: GIT_TERMINAL_PROMPT

      # - task: PowerShell@2
      #   inputs:
      #     targetType: inline
      #     script: Get-Host
      #     pwsh: false
      # - pwsh: |
      #     Write-Host "Build.Repository.Name -> $(Build.Repository.Name)"
      #   displayName: Variables

      # TODO: Use something other than echo, especially on windows
      # - script: |
      #     echo "===AGENT VARIABLES==="
      #     echo Agent.BuildDirectory -> $(Agent.BuildDirectory)
      #     echo Agent.HomeDirectory -> $(Agent.HomeDirectory)
      #     echo Agent.Id -> $(Agent.Id)
      #     echo Agent.JobName -> $(Agent.JobName)
      #     echo Agent.JobStatus -> $(Agent.JobStatus)
      #     echo Agent.MachineName -> $(Agent.MachineName)
      #     echo Agent.Name -> $(Agent.Name)
      #     echo Agent.OS -> $(Agent.OS)
      #     echo Agent.OSArchitecture -> $(Agent.OSArchitecture)
      #     echo Agent.TempDirectory -> $(Agent.TempDirectory)
      #     echo Agent.ToolsDirectory -> $(Agent.ToolsDirectory)
      #     echo Agent.WorkFolder -> $(Agent.WorkFolder)

      #     echo "===BUILD VARIABLES==="
      #     echo Build.ArtifactStagingDirectory -> $(Build.ArtifactStagingDirectory)
      #     echo Build.BuildId -> $(Build.BuildId)
      #     echo Build.BuildNumber -> $(Build.BuildNumber)
      #     echo Build.BuildUri -> $(Build.BuildUri)
      #     echo Build.BinariesDirectory -> $(Build.BinariesDirectory)
      #     echo Build.DefinitionName -> $(Build.DefinitionName)
      #     echo Build.DefinitionVersion -> $(Build.DefinitionVersion)
      #     echo Build.QueuedBy -> $(Build.QueuedBy)
      #     echo Build.QueuedById -> $(Build.QueuedById)
      #     echo Build.ReasonBuild.Repository.Clean -> $(Build.ReasonBuild.Repository.Clean)
      #     echo Build.Repository.LocalPath -> $(Build.Repository.LocalPath)
      #     echo Build.Repository.ID -> $(Build.Repository.ID)
      #     echo Build.Repository.Name -> $(Build.Repository.Name)
      #     echo Build.Repository.Provider -> $(Build.Repository.Provider)
      #     echo Build.Repository.Tfvc.WorkspaceBuild.Repository.UriBuild.RequestedFor -> $(Build.Repository.Tfvc.WorkspaceBuild.Repository.UriBuild.RequestedFor)
      #     echo Build.RequestedForEmail -> $(Build.RequestedForEmail)
      #     echo Build.RequestedForId -> $(Build.RequestedForId)
      #     echo Build.SourceBranch -> $(Build.SourceBranch)
      #     echo Build.SourceBranchName -> $(Build.SourceBranchName)
      #     echo Build.SourcesDirectory -> $(Build.SourcesDirectory)
      #     echo Build.SourceVersionBuild.SourceVersionMessageBuild.StagingDirectory -> $(Build.SourceVersionBuild.SourceVersionMessageBuild.StagingDirectory)
      #     echo Build.Repository.Git.SubmoduleCheckout -> $(Build.Repository.Git.SubmoduleCheckout)
      #     echo Build.SourceTfvcShelvesetBuild.TriggeredBy.BuildId -> $(Build.SourceTfvcShelvesetBuild.TriggeredBy.BuildId)
      #     echo Build.TriggeredBy.DefinitionId -> $(Build.TriggeredBy.DefinitionId)
      #     echo Build.TriggeredBy.DefinitionName -> $(Build.TriggeredBy.DefinitionName)
      #     echo Build.TriggeredBy.BuildNumber -> $(Build.TriggeredBy.BuildNumber)
      #     echo Build.TriggeredBy.ProjectID -> $(Build.TriggeredBy.ProjectID)
      #     echo Common.TestResultsDirectory -> $(Common.TestResultsDirectory)

      #     echo "===PIPELINE VARIABLES==="
      #     echo Pipeline.Workspace -> $(Pipeline.Workspace)

      #     echo "===DEPLOYMENT JOB VARIABLES==="
      #     echo Environment.Name -> $(Environment.Name)
      #     echo Environment.Id -> $(Environment.Id)
      #     echo Environment.ResourceName -> $(Environment.ResourceName)
      #     echo Environment.ResourceId -> $(Environment.ResourceId)

      #     echo "===SYSTEM VARIABLES==="
      #     echo System.HostType -> $(System.HostType)
      #     echo System.JobAttempt -> $(System.JobAttempt)
      #     echo System.JobDisplayName -> $(System.JobDisplayName)
      #     echo System.JobName -> $(System.JobName)
      #     echo System.PhaseAttempt -> $(System.PhaseAttempt)
      #     echo System.PhaseDisplayName -> $(System.PhaseDisplayName)
      #     echo System.PhaseName -> $(System.PhaseName)
      #     echo System.StageAttempt -> $(System.StageAttempt)
      #     echo System.StageDisplayName -> $(System.StageDisplayName)
      #     echo System.StageName -> $(System.StageName)
      #     echo System.PullRequest.IsFork -> $(System.PullRequest.IsFork)
      #     echo System.PullRequest.PullRequestId -> $(System.PullRequest.PullRequestId)
      #     echo System.PullRequest.PullRequestNumber -> $(System.PullRequest.PullRequestNumber)
      #     echo System.PullRequest.SourceBranch -> $(System.PullRequest.SourceBranch)
      #     echo System.PullRequest.SourceRepositoryURI -> $(System.PullRequest.SourceRepositoryURI)
      #     echo System.PullRequest.TargetBranch -> $(System.PullRequest.TargetBranch)
      #     echo System.TeamFoundationCollectionUri -> $(System.TeamFoundationCollectionUri)
      #     echo System.TeamProject -> $(System.TeamProject)
      #     echo System.TeamProjectId -> $(System.TeamProjectId)
      #     echo TF_BUILD -> $(TF_BUILD)
